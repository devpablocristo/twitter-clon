services:
  qh:
    container_name: "qh"
    build:
      context: ../../
      dockerfile: ./projects/qh/Dockerfile.stg
    image: "qh:${APP_VERSION}"
    env_file:
      # - .env
      - .env.example
    ports:
      - "${WEB_SERVER_PORT}:${WEB_SERVER_PORT}"
    environment:
      - APP_ENV=stg
      - APP_ROOT=/app
      - GO111MODULE=on
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION}
      - GIN_MODE=release #GIN_MODE=debug por defecto
    depends_on:
      - postgres
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget --spider -q http://localhost:${WEB_SERVER_PORT}/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  postgres:
    image: postgres:16.3
    container_name: "postgres"
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infra/postgres-storage:/storage:ro
      - ./infra/postgres-init:/docker-entrypoint-initdb.d:ro
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s

  pgadmin:
    image: dpage/pgadmin4:8.12
    container_name: "pgadmin"
    ports:
      - "${PGADMIN_PORT}:${PGADMIN_TARGET_PORT}"
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - app-network
    restart: unless-stopped

  mongodb:
    image: mongo:5.0.28
    container_name: "mongodb"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
    ports:
      - "${MONGO_PORT}:${MONGO_PORT}"
    volumes:
      - mongodb_data:/data/db
      - ./infra/scripts/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - app-network
    restart: unless-stopped

  mongo-express:
    image: mongo-express:1.0.2-20-alpine3.19
    container_name: "mongo-express"
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=${MONGO_INITDB_ROOT_USERNAME}
      - ME_CONFIG_MONGODB_ADMINPASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
      - ME_CONFIG_MONGODB_SERVER=${MONGO_HOST}
      - ME_CONFIG_MONGODB_URL=${ME_CONFIG_MONGODB_URL}
      - ME_CONFIG_PORT=${ME_CONFIG_PORT}
    ports:
      - "${ME_CONFIG_PORT}:${ME_CONFIG_PORT}"
    depends_on:
      - mongodb
    networks:
      - app-network
    restart: unless-stopped

  mailhog:
    image: mailhog/mailhog:v1.0.1
    container_name: "mailhog"
    ports:
      - "${SMTP_PORT}:${SMTP_PORT}"   # Puerto SMTP fijo
      - "${MH_WEB_UI_PORT}:${MH_WEB_UI_PORT}"   # Puerto UI web fijo
    networks:
      - app-network
    restart: unless-stopped
    volumes:
      - mailhog_data:/var/lib/mailhog

  redis:
    image: redis:7.0
    container_name: redis
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}"]
    networks:
      - app-network
    restart: unless-stopped
    volumes:
      - redis_data:/data

  rabbitmq:
    image: "rabbitmq:4.0.0-beta.3-management-alpine"
    container_name: rabbitmq
    environment:
      - RABBITMQ_USER=${RABBITMQ_USER}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
      - RABBITMQ_DEFAULT_VHOST=${RABBITMQ_VHOST}
    ports:
      - "${RABBITMQ_PORT}:${RABBITMQ_PORT}"
      - "${RABBITMQ_MANAGEMENT_PORT}:${RABBITMQ_MANAGEMENT_PORT}"
    networks:
      - app-network
    restart: unless-stopped
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - ./infra/rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro

  cassandra:
    image: cassandra:4.1
    container_name: cassandra
    ports:
      - "${CASSANDRA_PORT}:${CASSANDRA_PORT}"
    environment:
      - CASSANDRA_CLUSTER_NAME=${CASSANDRA_CLUSTER_NAME}
      - CASSANDRA_DC=${CASSANDRA_DC}
      - CASSANDRA_RACK=${CASSANDRA_RACK}
      - CASSANDRA_SEEDS=${CASSANDRA_HOSTS}
      - CASSANDRA_ENDPOINT_SNITCH=${CASSANDRA_ENDPOINT_SNITCH}
      - CASSANDRA_USERNAME=${CASSANDRA_USERNAME}
      - CASSANDRA_PASSWORD=${CASSANDRA_PASSWORD}
    volumes:
      - cassandra_data:/var/lib/cassandra
    networks:
      - app-network
    restart: unless-stopped

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
  pgadmin_data:
  mongodb_data:
  cassandra_data:
  redis_data:
  rabbitmq_data:
  mailhog_data: