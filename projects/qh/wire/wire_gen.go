// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"github.com/devpablocristo/monorepo/pkg/authe/jwt/v5"
	"github.com/devpablocristo/monorepo/pkg/brokers/rabbitmq/amqp091/producer"
	"github.com/devpablocristo/monorepo/pkg/databases/cache/redis/v8"
	"github.com/devpablocristo/monorepo/pkg/databases/nosql/cassandra/gocql"
	"github.com/devpablocristo/monorepo/pkg/databases/nosql/mongodb/mongo-driver"
	"github.com/devpablocristo/monorepo/pkg/databases/sql/gorm"
	"github.com/devpablocristo/monorepo/pkg/databases/sql/postgresql/pgxpool"
	"github.com/devpablocristo/monorepo/pkg/notification/smtp"
	"github.com/devpablocristo/monorepo/pkg/rest/clients/resty"
	"github.com/devpablocristo/monorepo/pkg/rest/middlewares/gin"
	"github.com/devpablocristo/monorepo/pkg/rest/servers/gin"
	"github.com/devpablocristo/monorepo/projects/qh/internal/assessment"
	"github.com/devpablocristo/monorepo/projects/qh/internal/authe"
	"github.com/devpablocristo/monorepo/projects/qh/internal/candidate"
	"github.com/devpablocristo/monorepo/projects/qh/internal/config"
	"github.com/devpablocristo/monorepo/projects/qh/internal/event"
	"github.com/devpablocristo/monorepo/projects/qh/internal/group"
	"github.com/devpablocristo/monorepo/projects/qh/internal/notification"
	"github.com/devpablocristo/monorepo/projects/qh/internal/person"
	"github.com/devpablocristo/monorepo/projects/qh/internal/tweet"
	"github.com/devpablocristo/monorepo/projects/qh/internal/user"
)

// Injectors from wire.go:

// Initialize se encarga de inyectar todas las dependencias usando Wire.
func Initialize() (*Dependencies, error) {
	loader, err := ProvideConfigLoader()
	if err != nil {
		return nil, err
	}
	server, err := ProvideGinServer()
	if err != nil {
		return nil, err
	}
	repository, err := ProvideGormRepository()
	if err != nil {
		return nil, err
	}
	pkgmongoRepository, err := ProvideMongoDbRepository()
	if err != nil {
		return nil, err
	}
	pkgpostgresqlRepository, err := ProvidePostgresRepository()
	if err != nil {
		return nil, err
	}
	cache, err := ProvideRedisCache()
	if err != nil {
		return nil, err
	}
	service, err := ProvideJwtService()
	if err != nil {
		return nil, err
	}
	client, err := ProvideHttpClient()
	if err != nil {
		return nil, err
	}
	pkgsmtpService, err := ProvideSmtpService()
	if err != nil {
		return nil, err
	}
	producer, err := ProvideRabbitProducer()
	if err != nil {
		return nil, err
	}
	pkgcassandraRepository, err := ProvideCassandraRepository()
	if err != nil {
		return nil, err
	}
	handlerFunc, err := ProvideJwtMiddleware()
	if err != nil {
		return nil, err
	}
	middlewares, err := ProvideMiddlewares(handlerFunc)
	if err != nil {
		return nil, err
	}
	personRepository, err := ProvidePersonRepository(pkgpostgresqlRepository)
	if err != nil {
		return nil, err
	}
	useCases := ProvidePersonUseCases(personRepository)
	handler := ProvidePersonHandler(server, useCases, middlewares)
	groupRepository, err := ProvideGroupRepository(repository)
	if err != nil {
		return nil, err
	}
	groupUseCases := ProvideGroupUseCases(groupRepository)
	groupHandler := ProvideGroupHandler(server, groupUseCases, middlewares)
	eventRepository, err := ProvideEventRepository(pkgmongoRepository)
	if err != nil {
		return nil, err
	}
	eventUseCases := ProvideEventUseCases(eventRepository)
	eventHandler := ProvideEventHandler(server, eventUseCases, middlewares)
	userRepository, err := ProvideUserRepository(repository)
	if err != nil {
		return nil, err
	}
	userUseCases := ProvideUserUseCases(userRepository)
	userHandler := ProvideUserHandler(server, userUseCases, middlewares)
	assessmentRepository, err := ProvideAssessmentRepository(repository)
	if err != nil {
		return nil, err
	}
	smtpService, err := ProvideNotificationSmtpService(pkgsmtpService)
	if err != nil {
		return nil, err
	}
	notificationUseCases := ProvideNotificationUseCases(smtpService)
	candidateRepository, err := ProvideCandidateRepository(repository)
	if err != nil {
		return nil, err
	}
	candidateUseCases := ProvideCandidateUseCases(candidateRepository)
	autheCache, err := ProvideAutheCache(cache)
	if err != nil {
		return nil, err
	}
	jwtService, err := ProvideAutheJwtService(service, loader)
	if err != nil {
		return nil, err
	}
	httpClient, err := ProvideAutheHttpClient(client, loader)
	if err != nil {
		return nil, err
	}
	autheUseCases := ProvideAutheUseCases(autheCache, jwtService, httpClient)
	assessmentUseCases := ProvideAssessmentUseCases(assessmentRepository, notificationUseCases, candidateUseCases, loader, autheUseCases, useCases)
	assessmentHandler := ProvideAssessmentHandler(server, assessmentUseCases, middlewares)
	candidateHandler := ProvideCandidateHandler(server, candidateUseCases, middlewares)
	autheHandler := ProvideAutheHandler(server, autheUseCases, middlewares)
	notificationHandler := ProvideNotificationHandler(server, notificationUseCases, middlewares)
	tweetRepository, err := ProvideTweetRepository(pkgcassandraRepository)
	if err != nil {
		return nil, err
	}
	tweetCache, err := ProvideTweetCache(cache)
	if err != nil {
		return nil, err
	}
	broker, err := ProvideTweetBroker(producer)
	if err != nil {
		return nil, err
	}
	tweetUseCases := ProvideTweetUseCases(tweetRepository, userUseCases, tweetCache, broker)
	tweetHandler := ProvideTweetHandler(server, tweetUseCases, middlewares)
	dependencies := &Dependencies{
		ConfigLoader:        loader,
		GinServer:           server,
		GormRepository:      repository,
		MongoRepository:     pkgmongoRepository,
		PostgresRepository:  pkgpostgresqlRepository,
		RedisCache:          cache,
		JwtService:          service,
		RestyClient:         client,
		SmtpService:         pkgsmtpService,
		RabbitProducer:      producer,
		CassandraRepository: pkgcassandraRepository,
		Middlewares:         middlewares,
		PersonHandler:       handler,
		GroupHandler:        groupHandler,
		EventHandler:        eventHandler,
		UserHandler:         userHandler,
		AssessmentHandler:   assessmentHandler,
		CandidateHandler:    candidateHandler,
		AutheHandler:        autheHandler,
		NotificationHandler: notificationHandler,
		TweetHandler:        tweetHandler,
		PersonUseCases:      useCases,
		UserUseCases:        userUseCases,
		TweetUseCases:       tweetUseCases,
	}
	return dependencies, nil
}

// wire.go:

// Dependencies reúne todas las dependencias de la aplicación que se
// inyectan con Wire.
type Dependencies struct {
	ConfigLoader        config.Loader
	GinServer           pkggin.Server
	GormRepository      pkggorm.Repository
	MongoRepository     pkgmongo.Repository
	PostgresRepository  pkgpostgresql.Repository
	RedisCache          pkgredis.Cache
	JwtService          pkgjwt.Service
	RestyClient         pkcresty.Client
	SmtpService         pkgsmtp.Service
	RabbitProducer      pkgrabbit.Producer
	CassandraRepository pkgcassandra.Repository

	Middlewares *pkgmwr.Middlewares

	PersonHandler       *person.Handler
	GroupHandler        *group.Handler
	EventHandler        *event.Handler
	UserHandler         *user.Handler
	AssessmentHandler   *assessment.Handler
	CandidateHandler    *candidate.Handler
	AutheHandler        *authe.Handler
	NotificationHandler *notification.Handler
	TweetHandler        *tweet.Handler

	// para pruebas
	PersonUseCases person.UseCases
	UserUseCases   user.UseCases
	TweetUseCases  tweet.UseCases
}
